Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> PROGRAM IDENTIFIER SEMICOLON block DOT
Rule 3     block -> variable_declaration_part procedure_or_function compound_statement
Rule 4     variable_declaration_part -> empty
Rule 5     variable_declaration_part -> VAR variable_declaration_list
Rule 6     variable_declaration_list -> variable_declaration
Rule 7     variable_declaration_list -> variable_declaration variable_declaration_list
Rule 8     variable_declaration -> IDENTIFIER COMMA variable_declaration
Rule 9     variable_declaration -> IDENTIFIER COLON type SEMICOLON
Rule 10    type -> SINTEGER
Rule 11    type -> SCHAR
Rule 12    type -> SREAL
Rule 13    type -> SSTRING
Rule 14    type -> SBOOLEAN
Rule 15    procedure_or_function -> proc_or_func_declaration SEMICOLON procedure_or_function
Rule 16    procedure_or_function -> empty
Rule 17    proc_or_func_declaration -> procedure_declaration
Rule 18    proc_or_func_declaration -> function_declaration
Rule 19    function_declaration -> function_heading SEMICOLON block
Rule 20    function_heading -> FUNCTION type
Rule 21    function_heading -> FUNCTION IDENTIFIER COLON type
Rule 22    function_heading -> FUNCTION IDENTIFIER LPAREN parameters_list RPAREN COLON type
Rule 23    parameters_list -> parameter COMMA parameters_list
Rule 24    parameters_list -> parameter
Rule 25    parameter -> IDENTIFIER COLON type
Rule 26    procedure_declaration -> procedure_heading SEMICOLON block
Rule 27    procedure_heading -> PROCEDURE IDENTIFIER
Rule 28    procedure_heading -> PROCEDURE IDENTIFIER LPAREN parameters_list RPAREN
Rule 29    compound_statement -> BEGIN statement_sequence END
Rule 30    statement_sequence -> statement SEMICOLON statement_sequence
Rule 31    statement_sequence -> statement SEMICOLON
Rule 32    statement -> compound_statement
Rule 33    statement -> assignment_statement
Rule 34    statement -> if_statement
Rule 35    statement -> while_statement
Rule 36    statement -> repeat_statement
Rule 37    statement -> for_statement
Rule 38    statement -> procedure_or_function_call
Rule 39    procedure_or_function_call -> IDENTIFIER
Rule 40    procedure_or_function_call -> IDENTIFIER LPAREN variables_list RPAREN
Rule 41    variables_list -> variables_list COMMA variable
Rule 42    variables_list -> variable
Rule 43    variable -> expression
Rule 44    assignment_statement -> IDENTIFIER ASSIGNMENT expression
Rule 45    if_statement -> IF expression THEN compound_statement else_statement
Rule 46    else_statement -> ELSE compound_statement
Rule 47    else_statement -> empty
Rule 48    while_statement -> WHILE expression DO statement
Rule 49    repeat_statement -> REPEAT statement UNTIL expression
Rule 50    for_statement -> FOR assignment_statement TO expression DO statement
Rule 51    for_statement -> FOR assignment_statement DOWNTO expression DO statement
Rule 52    expression -> expression and_or expression_m
Rule 53    expression -> expression_m
Rule 54    expression_m -> element
Rule 55    expression_m -> expression_m sign element
Rule 56    and_or -> AND
Rule 57    and_or -> OR
Rule 58    sign -> PLUS
Rule 59    sign -> MINUS
Rule 60    sign -> INT_DIV
Rule 61    sign -> FLOAT_DIV
Rule 62    sign -> MULTIPLY
Rule 63    sign -> MOD
Rule 64    sign -> EQ
Rule 65    sign -> NEQ
Rule 66    sign -> LT
Rule 67    sign -> GT
Rule 68    sign -> LTE
Rule 69    sign -> GTE
Rule 70    element -> BOOLEAN
Rule 71    element -> NOT element
Rule 72    element -> IDENTIFIER
Rule 73    element -> REAL
Rule 74    element -> INTEGER
Rule 75    element -> CHAR
Rule 76    element -> STRING
Rule 77    element -> LPAREN expression RPAREN
Rule 78    element -> function_call
Rule 79    function_call -> IDENTIFIER LPAREN variables_list RPAREN

Terminals, with rules where they appear

AND                  : 56
ASSIGNMENT           : 44
BEGIN                : 29
BOOLEAN              : 70
CHAR                 : 75
COLON                : 9 21 22 25
COMMA                : 8 23 41
DO                   : 48 50 51
DOT                  : 2
DOWNTO               : 51
ELSE                 : 46
END                  : 29
EQ                   : 64
FLOAT_DIV            : 61
FOR                  : 50 51
FUNCTION             : 20 21 22
GT                   : 67
GTE                  : 69
IDENTIFIER           : 2 8 9 21 22 25 27 28 39 40 44 72 79
IF                   : 45
INTEGER              : 74
INT_DIV              : 60
LPAREN               : 22 28 40 77 79
LT                   : 66
LTE                  : 68
MINUS                : 59
MOD                  : 63
MULTIPLY             : 62
NEQ                  : 65
NOT                  : 71
OR                   : 57
PLUS                 : 58
PROCEDURE            : 27 28
PROGRAM              : 2
REAL                 : 73
REPEAT               : 49
RPAREN               : 22 28 40 77 79
SBOOLEAN             : 14
SCHAR                : 11
SEMICOLON            : 2 9 15 19 26 30 31
SINTEGER             : 10
SREAL                : 12
SSTRING              : 13
STRING               : 76
THEN                 : 45
TO                   : 50
UNTIL                : 49
VAR                  : 5
WHILE                : 48
error                : 

Nonterminals, with rules where they appear

and_or               : 52
assignment_statement : 33 50 51
block                : 2 19 26
compound_statement   : 3 32 45 46
element              : 54 55 71
else_statement       : 45
empty                : 4 16 47
expression           : 43 44 45 48 49 50 51 52 77
expression_m         : 52 53 55
for_statement        : 37
function_call        : 78
function_declaration : 18
function_heading     : 19
if_statement         : 34
parameter            : 23 24
parameters_list      : 22 23 28
proc_or_func_declaration : 15
procedure_declaration : 17
procedure_heading    : 26
procedure_or_function : 3 15
procedure_or_function_call : 38
program              : 0
repeat_statement     : 36
sign                 : 55
statement            : 30 31 48 49 50 51
statement_sequence   : 29 30
type                 : 9 20 21 22 25
variable             : 41 42
variable_declaration : 6 7 8
variable_declaration_list : 5 7
variable_declaration_part : 3
variables_list       : 40 41 79
while_statement      : 35

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . PROGRAM IDENTIFIER SEMICOLON block DOT

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (2) program -> PROGRAM . IDENTIFIER SEMICOLON block DOT

    IDENTIFIER      shift and go to state 3


state 3

    (2) program -> PROGRAM IDENTIFIER . SEMICOLON block DOT

    SEMICOLON       shift and go to state 4


state 4

    (2) program -> PROGRAM IDENTIFIER SEMICOLON . block DOT
    (3) block -> . variable_declaration_part procedure_or_function compound_statement
    (4) variable_declaration_part -> . empty
    (5) variable_declaration_part -> . VAR variable_declaration_list
    (1) empty -> .

    VAR             shift and go to state 8
    PROCEDURE       reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    BEGIN           reduce using rule 1 (empty -> .)

    block                          shift and go to state 5
    variable_declaration_part      shift and go to state 6
    empty                          shift and go to state 7

state 5

    (2) program -> PROGRAM IDENTIFIER SEMICOLON block . DOT

    DOT             shift and go to state 9


state 6

    (3) block -> variable_declaration_part . procedure_or_function compound_statement
    (15) procedure_or_function -> . proc_or_func_declaration SEMICOLON procedure_or_function
    (16) procedure_or_function -> . empty
    (17) proc_or_func_declaration -> . procedure_declaration
    (18) proc_or_func_declaration -> . function_declaration
    (1) empty -> .
    (26) procedure_declaration -> . procedure_heading SEMICOLON block
    (19) function_declaration -> . function_heading SEMICOLON block
    (27) procedure_heading -> . PROCEDURE IDENTIFIER
    (28) procedure_heading -> . PROCEDURE IDENTIFIER LPAREN parameters_list RPAREN
    (20) function_heading -> . FUNCTION type
    (21) function_heading -> . FUNCTION IDENTIFIER COLON type
    (22) function_heading -> . FUNCTION IDENTIFIER LPAREN parameters_list RPAREN COLON type

    BEGIN           reduce using rule 1 (empty -> .)
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

    procedure_or_function          shift and go to state 10
    proc_or_func_declaration       shift and go to state 11
    empty                          shift and go to state 12
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    function_heading               shift and go to state 16

state 7

    (4) variable_declaration_part -> empty .

    PROCEDURE       reduce using rule 4 (variable_declaration_part -> empty .)
    FUNCTION        reduce using rule 4 (variable_declaration_part -> empty .)
    BEGIN           reduce using rule 4 (variable_declaration_part -> empty .)


state 8

    (5) variable_declaration_part -> VAR . variable_declaration_list
    (6) variable_declaration_list -> . variable_declaration
    (7) variable_declaration_list -> . variable_declaration variable_declaration_list
    (8) variable_declaration -> . IDENTIFIER COMMA variable_declaration
    (9) variable_declaration -> . IDENTIFIER COLON type SEMICOLON

    IDENTIFIER      shift and go to state 21

    variable_declaration_list      shift and go to state 19
    variable_declaration           shift and go to state 20

state 9

    (2) program -> PROGRAM IDENTIFIER SEMICOLON block DOT .

    $end            reduce using rule 2 (program -> PROGRAM IDENTIFIER SEMICOLON block DOT .)


state 10

    (3) block -> variable_declaration_part procedure_or_function . compound_statement
    (29) compound_statement -> . BEGIN statement_sequence END

    BEGIN           shift and go to state 23

    compound_statement             shift and go to state 22

state 11

    (15) procedure_or_function -> proc_or_func_declaration . SEMICOLON procedure_or_function

    SEMICOLON       shift and go to state 24


state 12

    (16) procedure_or_function -> empty .

    BEGIN           reduce using rule 16 (procedure_or_function -> empty .)


state 13

    (17) proc_or_func_declaration -> procedure_declaration .

    SEMICOLON       reduce using rule 17 (proc_or_func_declaration -> procedure_declaration .)


state 14

    (18) proc_or_func_declaration -> function_declaration .

    SEMICOLON       reduce using rule 18 (proc_or_func_declaration -> function_declaration .)


state 15

    (26) procedure_declaration -> procedure_heading . SEMICOLON block

    SEMICOLON       shift and go to state 25


state 16

    (19) function_declaration -> function_heading . SEMICOLON block

    SEMICOLON       shift and go to state 26


state 17

    (27) procedure_heading -> PROCEDURE . IDENTIFIER
    (28) procedure_heading -> PROCEDURE . IDENTIFIER LPAREN parameters_list RPAREN

    IDENTIFIER      shift and go to state 27


state 18

    (20) function_heading -> FUNCTION . type
    (21) function_heading -> FUNCTION . IDENTIFIER COLON type
    (22) function_heading -> FUNCTION . IDENTIFIER LPAREN parameters_list RPAREN COLON type
    (10) type -> . SINTEGER
    (11) type -> . SCHAR
    (12) type -> . SREAL
    (13) type -> . SSTRING
    (14) type -> . SBOOLEAN

    IDENTIFIER      shift and go to state 29
    SINTEGER        shift and go to state 30
    SCHAR           shift and go to state 31
    SREAL           shift and go to state 32
    SSTRING         shift and go to state 33
    SBOOLEAN        shift and go to state 34

    type                           shift and go to state 28

state 19

    (5) variable_declaration_part -> VAR variable_declaration_list .

    PROCEDURE       reduce using rule 5 (variable_declaration_part -> VAR variable_declaration_list .)
    FUNCTION        reduce using rule 5 (variable_declaration_part -> VAR variable_declaration_list .)
    BEGIN           reduce using rule 5 (variable_declaration_part -> VAR variable_declaration_list .)


state 20

    (6) variable_declaration_list -> variable_declaration .
    (7) variable_declaration_list -> variable_declaration . variable_declaration_list
    (6) variable_declaration_list -> . variable_declaration
    (7) variable_declaration_list -> . variable_declaration variable_declaration_list
    (8) variable_declaration -> . IDENTIFIER COMMA variable_declaration
    (9) variable_declaration -> . IDENTIFIER COLON type SEMICOLON

    PROCEDURE       reduce using rule 6 (variable_declaration_list -> variable_declaration .)
    FUNCTION        reduce using rule 6 (variable_declaration_list -> variable_declaration .)
    BEGIN           reduce using rule 6 (variable_declaration_list -> variable_declaration .)
    IDENTIFIER      shift and go to state 21

    variable_declaration           shift and go to state 20
    variable_declaration_list      shift and go to state 35

state 21

    (8) variable_declaration -> IDENTIFIER . COMMA variable_declaration
    (9) variable_declaration -> IDENTIFIER . COLON type SEMICOLON

    COMMA           shift and go to state 36
    COLON           shift and go to state 37


state 22

    (3) block -> variable_declaration_part procedure_or_function compound_statement .

    DOT             reduce using rule 3 (block -> variable_declaration_part procedure_or_function compound_statement .)
    SEMICOLON       reduce using rule 3 (block -> variable_declaration_part procedure_or_function compound_statement .)


state 23

    (29) compound_statement -> BEGIN . statement_sequence END
    (30) statement_sequence -> . statement SEMICOLON statement_sequence
    (31) statement_sequence -> . statement SEMICOLON
    (32) statement -> . compound_statement
    (33) statement -> . assignment_statement
    (34) statement -> . if_statement
    (35) statement -> . while_statement
    (36) statement -> . repeat_statement
    (37) statement -> . for_statement
    (38) statement -> . procedure_or_function_call
    (29) compound_statement -> . BEGIN statement_sequence END
    (44) assignment_statement -> . IDENTIFIER ASSIGNMENT expression
    (45) if_statement -> . IF expression THEN compound_statement else_statement
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement UNTIL expression
    (50) for_statement -> . FOR assignment_statement TO expression DO statement
    (51) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (39) procedure_or_function_call -> . IDENTIFIER
    (40) procedure_or_function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BEGIN           shift and go to state 23
    IDENTIFIER      shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51

    statement_sequence             shift and go to state 38
    statement                      shift and go to state 39
    compound_statement             shift and go to state 40
    assignment_statement           shift and go to state 41
    if_statement                   shift and go to state 42
    while_statement                shift and go to state 43
    repeat_statement               shift and go to state 44
    for_statement                  shift and go to state 45
    procedure_or_function_call     shift and go to state 46

state 24

    (15) procedure_or_function -> proc_or_func_declaration SEMICOLON . procedure_or_function
    (15) procedure_or_function -> . proc_or_func_declaration SEMICOLON procedure_or_function
    (16) procedure_or_function -> . empty
    (17) proc_or_func_declaration -> . procedure_declaration
    (18) proc_or_func_declaration -> . function_declaration
    (1) empty -> .
    (26) procedure_declaration -> . procedure_heading SEMICOLON block
    (19) function_declaration -> . function_heading SEMICOLON block
    (27) procedure_heading -> . PROCEDURE IDENTIFIER
    (28) procedure_heading -> . PROCEDURE IDENTIFIER LPAREN parameters_list RPAREN
    (20) function_heading -> . FUNCTION type
    (21) function_heading -> . FUNCTION IDENTIFIER COLON type
    (22) function_heading -> . FUNCTION IDENTIFIER LPAREN parameters_list RPAREN COLON type

    BEGIN           reduce using rule 1 (empty -> .)
    PROCEDURE       shift and go to state 17
    FUNCTION        shift and go to state 18

    proc_or_func_declaration       shift and go to state 11
    procedure_or_function          shift and go to state 52
    empty                          shift and go to state 12
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14
    procedure_heading              shift and go to state 15
    function_heading               shift and go to state 16

state 25

    (26) procedure_declaration -> procedure_heading SEMICOLON . block
    (3) block -> . variable_declaration_part procedure_or_function compound_statement
    (4) variable_declaration_part -> . empty
    (5) variable_declaration_part -> . VAR variable_declaration_list
    (1) empty -> .

    VAR             shift and go to state 8
    PROCEDURE       reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    BEGIN           reduce using rule 1 (empty -> .)

    block                          shift and go to state 53
    variable_declaration_part      shift and go to state 6
    empty                          shift and go to state 7

state 26

    (19) function_declaration -> function_heading SEMICOLON . block
    (3) block -> . variable_declaration_part procedure_or_function compound_statement
    (4) variable_declaration_part -> . empty
    (5) variable_declaration_part -> . VAR variable_declaration_list
    (1) empty -> .

    VAR             shift and go to state 8
    PROCEDURE       reduce using rule 1 (empty -> .)
    FUNCTION        reduce using rule 1 (empty -> .)
    BEGIN           reduce using rule 1 (empty -> .)

    block                          shift and go to state 54
    variable_declaration_part      shift and go to state 6
    empty                          shift and go to state 7

state 27

    (27) procedure_heading -> PROCEDURE IDENTIFIER .
    (28) procedure_heading -> PROCEDURE IDENTIFIER . LPAREN parameters_list RPAREN

    SEMICOLON       reduce using rule 27 (procedure_heading -> PROCEDURE IDENTIFIER .)
    LPAREN          shift and go to state 55


state 28

    (20) function_heading -> FUNCTION type .

    SEMICOLON       reduce using rule 20 (function_heading -> FUNCTION type .)


state 29

    (21) function_heading -> FUNCTION IDENTIFIER . COLON type
    (22) function_heading -> FUNCTION IDENTIFIER . LPAREN parameters_list RPAREN COLON type

    COLON           shift and go to state 56
    LPAREN          shift and go to state 57


state 30

    (10) type -> SINTEGER .

    SEMICOLON       reduce using rule 10 (type -> SINTEGER .)
    COMMA           reduce using rule 10 (type -> SINTEGER .)
    RPAREN          reduce using rule 10 (type -> SINTEGER .)


state 31

    (11) type -> SCHAR .

    SEMICOLON       reduce using rule 11 (type -> SCHAR .)
    COMMA           reduce using rule 11 (type -> SCHAR .)
    RPAREN          reduce using rule 11 (type -> SCHAR .)


state 32

    (12) type -> SREAL .

    SEMICOLON       reduce using rule 12 (type -> SREAL .)
    COMMA           reduce using rule 12 (type -> SREAL .)
    RPAREN          reduce using rule 12 (type -> SREAL .)


state 33

    (13) type -> SSTRING .

    SEMICOLON       reduce using rule 13 (type -> SSTRING .)
    COMMA           reduce using rule 13 (type -> SSTRING .)
    RPAREN          reduce using rule 13 (type -> SSTRING .)


state 34

    (14) type -> SBOOLEAN .

    SEMICOLON       reduce using rule 14 (type -> SBOOLEAN .)
    COMMA           reduce using rule 14 (type -> SBOOLEAN .)
    RPAREN          reduce using rule 14 (type -> SBOOLEAN .)


state 35

    (7) variable_declaration_list -> variable_declaration variable_declaration_list .

    PROCEDURE       reduce using rule 7 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    FUNCTION        reduce using rule 7 (variable_declaration_list -> variable_declaration variable_declaration_list .)
    BEGIN           reduce using rule 7 (variable_declaration_list -> variable_declaration variable_declaration_list .)


state 36

    (8) variable_declaration -> IDENTIFIER COMMA . variable_declaration
    (8) variable_declaration -> . IDENTIFIER COMMA variable_declaration
    (9) variable_declaration -> . IDENTIFIER COLON type SEMICOLON

    IDENTIFIER      shift and go to state 21

    variable_declaration           shift and go to state 58

state 37

    (9) variable_declaration -> IDENTIFIER COLON . type SEMICOLON
    (10) type -> . SINTEGER
    (11) type -> . SCHAR
    (12) type -> . SREAL
    (13) type -> . SSTRING
    (14) type -> . SBOOLEAN

    SINTEGER        shift and go to state 30
    SCHAR           shift and go to state 31
    SREAL           shift and go to state 32
    SSTRING         shift and go to state 33
    SBOOLEAN        shift and go to state 34

    type                           shift and go to state 59

state 38

    (29) compound_statement -> BEGIN statement_sequence . END

    END             shift and go to state 60


state 39

    (30) statement_sequence -> statement . SEMICOLON statement_sequence
    (31) statement_sequence -> statement . SEMICOLON

    SEMICOLON       shift and go to state 61


state 40

    (32) statement -> compound_statement .

    SEMICOLON       reduce using rule 32 (statement -> compound_statement .)
    UNTIL           reduce using rule 32 (statement -> compound_statement .)


state 41

    (33) statement -> assignment_statement .

    SEMICOLON       reduce using rule 33 (statement -> assignment_statement .)
    UNTIL           reduce using rule 33 (statement -> assignment_statement .)


state 42

    (34) statement -> if_statement .

    SEMICOLON       reduce using rule 34 (statement -> if_statement .)
    UNTIL           reduce using rule 34 (statement -> if_statement .)


state 43

    (35) statement -> while_statement .

    SEMICOLON       reduce using rule 35 (statement -> while_statement .)
    UNTIL           reduce using rule 35 (statement -> while_statement .)


state 44

    (36) statement -> repeat_statement .

    SEMICOLON       reduce using rule 36 (statement -> repeat_statement .)
    UNTIL           reduce using rule 36 (statement -> repeat_statement .)


state 45

    (37) statement -> for_statement .

    SEMICOLON       reduce using rule 37 (statement -> for_statement .)
    UNTIL           reduce using rule 37 (statement -> for_statement .)


state 46

    (38) statement -> procedure_or_function_call .

    SEMICOLON       reduce using rule 38 (statement -> procedure_or_function_call .)
    UNTIL           reduce using rule 38 (statement -> procedure_or_function_call .)


state 47

    (44) assignment_statement -> IDENTIFIER . ASSIGNMENT expression
    (39) procedure_or_function_call -> IDENTIFIER .
    (40) procedure_or_function_call -> IDENTIFIER . LPAREN variables_list RPAREN

    ASSIGNMENT      shift and go to state 62
    SEMICOLON       reduce using rule 39 (procedure_or_function_call -> IDENTIFIER .)
    UNTIL           reduce using rule 39 (procedure_or_function_call -> IDENTIFIER .)
    LPAREN          shift and go to state 63


state 48

    (45) if_statement -> IF . expression THEN compound_statement else_statement
    (52) expression -> . expression and_or expression_m
    (53) expression -> . expression_m
    (54) expression_m -> . element
    (55) expression_m -> . expression_m sign element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    expression                     shift and go to state 64
    expression_m                   shift and go to state 65
    element                        shift and go to state 66
    function_call                  shift and go to state 75

state 49

    (48) while_statement -> WHILE . expression DO statement
    (52) expression -> . expression and_or expression_m
    (53) expression -> . expression_m
    (54) expression_m -> . element
    (55) expression_m -> . expression_m sign element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    expression                     shift and go to state 76
    expression_m                   shift and go to state 65
    element                        shift and go to state 66
    function_call                  shift and go to state 75

state 50

    (49) repeat_statement -> REPEAT . statement UNTIL expression
    (32) statement -> . compound_statement
    (33) statement -> . assignment_statement
    (34) statement -> . if_statement
    (35) statement -> . while_statement
    (36) statement -> . repeat_statement
    (37) statement -> . for_statement
    (38) statement -> . procedure_or_function_call
    (29) compound_statement -> . BEGIN statement_sequence END
    (44) assignment_statement -> . IDENTIFIER ASSIGNMENT expression
    (45) if_statement -> . IF expression THEN compound_statement else_statement
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement UNTIL expression
    (50) for_statement -> . FOR assignment_statement TO expression DO statement
    (51) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (39) procedure_or_function_call -> . IDENTIFIER
    (40) procedure_or_function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BEGIN           shift and go to state 23
    IDENTIFIER      shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51

    statement                      shift and go to state 77
    compound_statement             shift and go to state 40
    assignment_statement           shift and go to state 41
    if_statement                   shift and go to state 42
    while_statement                shift and go to state 43
    repeat_statement               shift and go to state 44
    for_statement                  shift and go to state 45
    procedure_or_function_call     shift and go to state 46

state 51

    (50) for_statement -> FOR . assignment_statement TO expression DO statement
    (51) for_statement -> FOR . assignment_statement DOWNTO expression DO statement
    (44) assignment_statement -> . IDENTIFIER ASSIGNMENT expression

    IDENTIFIER      shift and go to state 79

    assignment_statement           shift and go to state 78

state 52

    (15) procedure_or_function -> proc_or_func_declaration SEMICOLON procedure_or_function .

    BEGIN           reduce using rule 15 (procedure_or_function -> proc_or_func_declaration SEMICOLON procedure_or_function .)


state 53

    (26) procedure_declaration -> procedure_heading SEMICOLON block .

    SEMICOLON       reduce using rule 26 (procedure_declaration -> procedure_heading SEMICOLON block .)


state 54

    (19) function_declaration -> function_heading SEMICOLON block .

    SEMICOLON       reduce using rule 19 (function_declaration -> function_heading SEMICOLON block .)


state 55

    (28) procedure_heading -> PROCEDURE IDENTIFIER LPAREN . parameters_list RPAREN
    (23) parameters_list -> . parameter COMMA parameters_list
    (24) parameters_list -> . parameter
    (25) parameter -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 80

    parameters_list                shift and go to state 81
    parameter                      shift and go to state 82

state 56

    (21) function_heading -> FUNCTION IDENTIFIER COLON . type
    (10) type -> . SINTEGER
    (11) type -> . SCHAR
    (12) type -> . SREAL
    (13) type -> . SSTRING
    (14) type -> . SBOOLEAN

    SINTEGER        shift and go to state 30
    SCHAR           shift and go to state 31
    SREAL           shift and go to state 32
    SSTRING         shift and go to state 33
    SBOOLEAN        shift and go to state 34

    type                           shift and go to state 83

state 57

    (22) function_heading -> FUNCTION IDENTIFIER LPAREN . parameters_list RPAREN COLON type
    (23) parameters_list -> . parameter COMMA parameters_list
    (24) parameters_list -> . parameter
    (25) parameter -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 80

    parameters_list                shift and go to state 84
    parameter                      shift and go to state 82

state 58

    (8) variable_declaration -> IDENTIFIER COMMA variable_declaration .

    IDENTIFIER      reduce using rule 8 (variable_declaration -> IDENTIFIER COMMA variable_declaration .)
    PROCEDURE       reduce using rule 8 (variable_declaration -> IDENTIFIER COMMA variable_declaration .)
    FUNCTION        reduce using rule 8 (variable_declaration -> IDENTIFIER COMMA variable_declaration .)
    BEGIN           reduce using rule 8 (variable_declaration -> IDENTIFIER COMMA variable_declaration .)


state 59

    (9) variable_declaration -> IDENTIFIER COLON type . SEMICOLON

    SEMICOLON       shift and go to state 85


state 60

    (29) compound_statement -> BEGIN statement_sequence END .

    DOT             reduce using rule 29 (compound_statement -> BEGIN statement_sequence END .)
    SEMICOLON       reduce using rule 29 (compound_statement -> BEGIN statement_sequence END .)
    UNTIL           reduce using rule 29 (compound_statement -> BEGIN statement_sequence END .)
    ELSE            reduce using rule 29 (compound_statement -> BEGIN statement_sequence END .)


state 61

    (30) statement_sequence -> statement SEMICOLON . statement_sequence
    (31) statement_sequence -> statement SEMICOLON .
    (30) statement_sequence -> . statement SEMICOLON statement_sequence
    (31) statement_sequence -> . statement SEMICOLON
    (32) statement -> . compound_statement
    (33) statement -> . assignment_statement
    (34) statement -> . if_statement
    (35) statement -> . while_statement
    (36) statement -> . repeat_statement
    (37) statement -> . for_statement
    (38) statement -> . procedure_or_function_call
    (29) compound_statement -> . BEGIN statement_sequence END
    (44) assignment_statement -> . IDENTIFIER ASSIGNMENT expression
    (45) if_statement -> . IF expression THEN compound_statement else_statement
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement UNTIL expression
    (50) for_statement -> . FOR assignment_statement TO expression DO statement
    (51) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (39) procedure_or_function_call -> . IDENTIFIER
    (40) procedure_or_function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    END             reduce using rule 31 (statement_sequence -> statement SEMICOLON .)
    BEGIN           shift and go to state 23
    IDENTIFIER      shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51

    statement                      shift and go to state 39
    statement_sequence             shift and go to state 86
    compound_statement             shift and go to state 40
    assignment_statement           shift and go to state 41
    if_statement                   shift and go to state 42
    while_statement                shift and go to state 43
    repeat_statement               shift and go to state 44
    for_statement                  shift and go to state 45
    procedure_or_function_call     shift and go to state 46

state 62

    (44) assignment_statement -> IDENTIFIER ASSIGNMENT . expression
    (52) expression -> . expression and_or expression_m
    (53) expression -> . expression_m
    (54) expression_m -> . element
    (55) expression_m -> . expression_m sign element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    expression                     shift and go to state 87
    expression_m                   shift and go to state 65
    element                        shift and go to state 66
    function_call                  shift and go to state 75

state 63

    (40) procedure_or_function_call -> IDENTIFIER LPAREN . variables_list RPAREN
    (41) variables_list -> . variables_list COMMA variable
    (42) variables_list -> . variable
    (43) variable -> . expression
    (52) expression -> . expression and_or expression_m
    (53) expression -> . expression_m
    (54) expression_m -> . element
    (55) expression_m -> . expression_m sign element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    variables_list                 shift and go to state 88
    variable                       shift and go to state 89
    expression                     shift and go to state 90
    expression_m                   shift and go to state 65
    element                        shift and go to state 66
    function_call                  shift and go to state 75

state 64

    (45) if_statement -> IF expression . THEN compound_statement else_statement
    (52) expression -> expression . and_or expression_m
    (56) and_or -> . AND
    (57) and_or -> . OR

    THEN            shift and go to state 91
    AND             shift and go to state 93
    OR              shift and go to state 94

    and_or                         shift and go to state 92

state 65

    (53) expression -> expression_m .
    (55) expression_m -> expression_m . sign element
    (58) sign -> . PLUS
    (59) sign -> . MINUS
    (60) sign -> . INT_DIV
    (61) sign -> . FLOAT_DIV
    (62) sign -> . MULTIPLY
    (63) sign -> . MOD
    (64) sign -> . EQ
    (65) sign -> . NEQ
    (66) sign -> . LT
    (67) sign -> . GT
    (68) sign -> . LTE
    (69) sign -> . GTE

    THEN            reduce using rule 53 (expression -> expression_m .)
    AND             reduce using rule 53 (expression -> expression_m .)
    OR              reduce using rule 53 (expression -> expression_m .)
    DO              reduce using rule 53 (expression -> expression_m .)
    SEMICOLON       reduce using rule 53 (expression -> expression_m .)
    UNTIL           reduce using rule 53 (expression -> expression_m .)
    TO              reduce using rule 53 (expression -> expression_m .)
    DOWNTO          reduce using rule 53 (expression -> expression_m .)
    RPAREN          reduce using rule 53 (expression -> expression_m .)
    COMMA           reduce using rule 53 (expression -> expression_m .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    INT_DIV         shift and go to state 98
    FLOAT_DIV       shift and go to state 99
    MULTIPLY        shift and go to state 100
    MOD             shift and go to state 101
    EQ              shift and go to state 102
    NEQ             shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    LTE             shift and go to state 106
    GTE             shift and go to state 107

    sign                           shift and go to state 95

state 66

    (54) expression_m -> element .

    PLUS            reduce using rule 54 (expression_m -> element .)
    MINUS           reduce using rule 54 (expression_m -> element .)
    INT_DIV         reduce using rule 54 (expression_m -> element .)
    FLOAT_DIV       reduce using rule 54 (expression_m -> element .)
    MULTIPLY        reduce using rule 54 (expression_m -> element .)
    MOD             reduce using rule 54 (expression_m -> element .)
    EQ              reduce using rule 54 (expression_m -> element .)
    NEQ             reduce using rule 54 (expression_m -> element .)
    LT              reduce using rule 54 (expression_m -> element .)
    GT              reduce using rule 54 (expression_m -> element .)
    LTE             reduce using rule 54 (expression_m -> element .)
    GTE             reduce using rule 54 (expression_m -> element .)
    THEN            reduce using rule 54 (expression_m -> element .)
    AND             reduce using rule 54 (expression_m -> element .)
    OR              reduce using rule 54 (expression_m -> element .)
    DO              reduce using rule 54 (expression_m -> element .)
    SEMICOLON       reduce using rule 54 (expression_m -> element .)
    UNTIL           reduce using rule 54 (expression_m -> element .)
    TO              reduce using rule 54 (expression_m -> element .)
    DOWNTO          reduce using rule 54 (expression_m -> element .)
    RPAREN          reduce using rule 54 (expression_m -> element .)
    COMMA           reduce using rule 54 (expression_m -> element .)


state 67

    (70) element -> BOOLEAN .

    PLUS            reduce using rule 70 (element -> BOOLEAN .)
    MINUS           reduce using rule 70 (element -> BOOLEAN .)
    INT_DIV         reduce using rule 70 (element -> BOOLEAN .)
    FLOAT_DIV       reduce using rule 70 (element -> BOOLEAN .)
    MULTIPLY        reduce using rule 70 (element -> BOOLEAN .)
    MOD             reduce using rule 70 (element -> BOOLEAN .)
    EQ              reduce using rule 70 (element -> BOOLEAN .)
    NEQ             reduce using rule 70 (element -> BOOLEAN .)
    LT              reduce using rule 70 (element -> BOOLEAN .)
    GT              reduce using rule 70 (element -> BOOLEAN .)
    LTE             reduce using rule 70 (element -> BOOLEAN .)
    GTE             reduce using rule 70 (element -> BOOLEAN .)
    THEN            reduce using rule 70 (element -> BOOLEAN .)
    AND             reduce using rule 70 (element -> BOOLEAN .)
    OR              reduce using rule 70 (element -> BOOLEAN .)
    DO              reduce using rule 70 (element -> BOOLEAN .)
    SEMICOLON       reduce using rule 70 (element -> BOOLEAN .)
    UNTIL           reduce using rule 70 (element -> BOOLEAN .)
    TO              reduce using rule 70 (element -> BOOLEAN .)
    DOWNTO          reduce using rule 70 (element -> BOOLEAN .)
    RPAREN          reduce using rule 70 (element -> BOOLEAN .)
    COMMA           reduce using rule 70 (element -> BOOLEAN .)


state 68

    (71) element -> NOT . element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    element                        shift and go to state 108
    function_call                  shift and go to state 75

state 69

    (72) element -> IDENTIFIER .
    (79) function_call -> IDENTIFIER . LPAREN variables_list RPAREN

    PLUS            reduce using rule 72 (element -> IDENTIFIER .)
    MINUS           reduce using rule 72 (element -> IDENTIFIER .)
    INT_DIV         reduce using rule 72 (element -> IDENTIFIER .)
    FLOAT_DIV       reduce using rule 72 (element -> IDENTIFIER .)
    MULTIPLY        reduce using rule 72 (element -> IDENTIFIER .)
    MOD             reduce using rule 72 (element -> IDENTIFIER .)
    EQ              reduce using rule 72 (element -> IDENTIFIER .)
    NEQ             reduce using rule 72 (element -> IDENTIFIER .)
    LT              reduce using rule 72 (element -> IDENTIFIER .)
    GT              reduce using rule 72 (element -> IDENTIFIER .)
    LTE             reduce using rule 72 (element -> IDENTIFIER .)
    GTE             reduce using rule 72 (element -> IDENTIFIER .)
    THEN            reduce using rule 72 (element -> IDENTIFIER .)
    AND             reduce using rule 72 (element -> IDENTIFIER .)
    OR              reduce using rule 72 (element -> IDENTIFIER .)
    DO              reduce using rule 72 (element -> IDENTIFIER .)
    SEMICOLON       reduce using rule 72 (element -> IDENTIFIER .)
    UNTIL           reduce using rule 72 (element -> IDENTIFIER .)
    TO              reduce using rule 72 (element -> IDENTIFIER .)
    DOWNTO          reduce using rule 72 (element -> IDENTIFIER .)
    RPAREN          reduce using rule 72 (element -> IDENTIFIER .)
    COMMA           reduce using rule 72 (element -> IDENTIFIER .)
    LPAREN          shift and go to state 109


state 70

    (73) element -> REAL .

    PLUS            reduce using rule 73 (element -> REAL .)
    MINUS           reduce using rule 73 (element -> REAL .)
    INT_DIV         reduce using rule 73 (element -> REAL .)
    FLOAT_DIV       reduce using rule 73 (element -> REAL .)
    MULTIPLY        reduce using rule 73 (element -> REAL .)
    MOD             reduce using rule 73 (element -> REAL .)
    EQ              reduce using rule 73 (element -> REAL .)
    NEQ             reduce using rule 73 (element -> REAL .)
    LT              reduce using rule 73 (element -> REAL .)
    GT              reduce using rule 73 (element -> REAL .)
    LTE             reduce using rule 73 (element -> REAL .)
    GTE             reduce using rule 73 (element -> REAL .)
    THEN            reduce using rule 73 (element -> REAL .)
    AND             reduce using rule 73 (element -> REAL .)
    OR              reduce using rule 73 (element -> REAL .)
    DO              reduce using rule 73 (element -> REAL .)
    SEMICOLON       reduce using rule 73 (element -> REAL .)
    UNTIL           reduce using rule 73 (element -> REAL .)
    TO              reduce using rule 73 (element -> REAL .)
    DOWNTO          reduce using rule 73 (element -> REAL .)
    RPAREN          reduce using rule 73 (element -> REAL .)
    COMMA           reduce using rule 73 (element -> REAL .)


state 71

    (74) element -> INTEGER .

    PLUS            reduce using rule 74 (element -> INTEGER .)
    MINUS           reduce using rule 74 (element -> INTEGER .)
    INT_DIV         reduce using rule 74 (element -> INTEGER .)
    FLOAT_DIV       reduce using rule 74 (element -> INTEGER .)
    MULTIPLY        reduce using rule 74 (element -> INTEGER .)
    MOD             reduce using rule 74 (element -> INTEGER .)
    EQ              reduce using rule 74 (element -> INTEGER .)
    NEQ             reduce using rule 74 (element -> INTEGER .)
    LT              reduce using rule 74 (element -> INTEGER .)
    GT              reduce using rule 74 (element -> INTEGER .)
    LTE             reduce using rule 74 (element -> INTEGER .)
    GTE             reduce using rule 74 (element -> INTEGER .)
    THEN            reduce using rule 74 (element -> INTEGER .)
    AND             reduce using rule 74 (element -> INTEGER .)
    OR              reduce using rule 74 (element -> INTEGER .)
    DO              reduce using rule 74 (element -> INTEGER .)
    SEMICOLON       reduce using rule 74 (element -> INTEGER .)
    UNTIL           reduce using rule 74 (element -> INTEGER .)
    TO              reduce using rule 74 (element -> INTEGER .)
    DOWNTO          reduce using rule 74 (element -> INTEGER .)
    RPAREN          reduce using rule 74 (element -> INTEGER .)
    COMMA           reduce using rule 74 (element -> INTEGER .)


state 72

    (75) element -> CHAR .

    PLUS            reduce using rule 75 (element -> CHAR .)
    MINUS           reduce using rule 75 (element -> CHAR .)
    INT_DIV         reduce using rule 75 (element -> CHAR .)
    FLOAT_DIV       reduce using rule 75 (element -> CHAR .)
    MULTIPLY        reduce using rule 75 (element -> CHAR .)
    MOD             reduce using rule 75 (element -> CHAR .)
    EQ              reduce using rule 75 (element -> CHAR .)
    NEQ             reduce using rule 75 (element -> CHAR .)
    LT              reduce using rule 75 (element -> CHAR .)
    GT              reduce using rule 75 (element -> CHAR .)
    LTE             reduce using rule 75 (element -> CHAR .)
    GTE             reduce using rule 75 (element -> CHAR .)
    THEN            reduce using rule 75 (element -> CHAR .)
    AND             reduce using rule 75 (element -> CHAR .)
    OR              reduce using rule 75 (element -> CHAR .)
    DO              reduce using rule 75 (element -> CHAR .)
    SEMICOLON       reduce using rule 75 (element -> CHAR .)
    UNTIL           reduce using rule 75 (element -> CHAR .)
    TO              reduce using rule 75 (element -> CHAR .)
    DOWNTO          reduce using rule 75 (element -> CHAR .)
    RPAREN          reduce using rule 75 (element -> CHAR .)
    COMMA           reduce using rule 75 (element -> CHAR .)


state 73

    (76) element -> STRING .

    PLUS            reduce using rule 76 (element -> STRING .)
    MINUS           reduce using rule 76 (element -> STRING .)
    INT_DIV         reduce using rule 76 (element -> STRING .)
    FLOAT_DIV       reduce using rule 76 (element -> STRING .)
    MULTIPLY        reduce using rule 76 (element -> STRING .)
    MOD             reduce using rule 76 (element -> STRING .)
    EQ              reduce using rule 76 (element -> STRING .)
    NEQ             reduce using rule 76 (element -> STRING .)
    LT              reduce using rule 76 (element -> STRING .)
    GT              reduce using rule 76 (element -> STRING .)
    LTE             reduce using rule 76 (element -> STRING .)
    GTE             reduce using rule 76 (element -> STRING .)
    THEN            reduce using rule 76 (element -> STRING .)
    AND             reduce using rule 76 (element -> STRING .)
    OR              reduce using rule 76 (element -> STRING .)
    DO              reduce using rule 76 (element -> STRING .)
    SEMICOLON       reduce using rule 76 (element -> STRING .)
    UNTIL           reduce using rule 76 (element -> STRING .)
    TO              reduce using rule 76 (element -> STRING .)
    DOWNTO          reduce using rule 76 (element -> STRING .)
    RPAREN          reduce using rule 76 (element -> STRING .)
    COMMA           reduce using rule 76 (element -> STRING .)


state 74

    (77) element -> LPAREN . expression RPAREN
    (52) expression -> . expression and_or expression_m
    (53) expression -> . expression_m
    (54) expression_m -> . element
    (55) expression_m -> . expression_m sign element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    expression                     shift and go to state 110
    expression_m                   shift and go to state 65
    element                        shift and go to state 66
    function_call                  shift and go to state 75

state 75

    (78) element -> function_call .

    PLUS            reduce using rule 78 (element -> function_call .)
    MINUS           reduce using rule 78 (element -> function_call .)
    INT_DIV         reduce using rule 78 (element -> function_call .)
    FLOAT_DIV       reduce using rule 78 (element -> function_call .)
    MULTIPLY        reduce using rule 78 (element -> function_call .)
    MOD             reduce using rule 78 (element -> function_call .)
    EQ              reduce using rule 78 (element -> function_call .)
    NEQ             reduce using rule 78 (element -> function_call .)
    LT              reduce using rule 78 (element -> function_call .)
    GT              reduce using rule 78 (element -> function_call .)
    LTE             reduce using rule 78 (element -> function_call .)
    GTE             reduce using rule 78 (element -> function_call .)
    THEN            reduce using rule 78 (element -> function_call .)
    AND             reduce using rule 78 (element -> function_call .)
    OR              reduce using rule 78 (element -> function_call .)
    DO              reduce using rule 78 (element -> function_call .)
    SEMICOLON       reduce using rule 78 (element -> function_call .)
    UNTIL           reduce using rule 78 (element -> function_call .)
    TO              reduce using rule 78 (element -> function_call .)
    DOWNTO          reduce using rule 78 (element -> function_call .)
    RPAREN          reduce using rule 78 (element -> function_call .)
    COMMA           reduce using rule 78 (element -> function_call .)


state 76

    (48) while_statement -> WHILE expression . DO statement
    (52) expression -> expression . and_or expression_m
    (56) and_or -> . AND
    (57) and_or -> . OR

    DO              shift and go to state 111
    AND             shift and go to state 93
    OR              shift and go to state 94

    and_or                         shift and go to state 92

state 77

    (49) repeat_statement -> REPEAT statement . UNTIL expression

    UNTIL           shift and go to state 112


state 78

    (50) for_statement -> FOR assignment_statement . TO expression DO statement
    (51) for_statement -> FOR assignment_statement . DOWNTO expression DO statement

    TO              shift and go to state 113
    DOWNTO          shift and go to state 114


state 79

    (44) assignment_statement -> IDENTIFIER . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 62


state 80

    (25) parameter -> IDENTIFIER . COLON type

    COLON           shift and go to state 115


state 81

    (28) procedure_heading -> PROCEDURE IDENTIFIER LPAREN parameters_list . RPAREN

    RPAREN          shift and go to state 116


state 82

    (23) parameters_list -> parameter . COMMA parameters_list
    (24) parameters_list -> parameter .

    COMMA           shift and go to state 117
    RPAREN          reduce using rule 24 (parameters_list -> parameter .)


state 83

    (21) function_heading -> FUNCTION IDENTIFIER COLON type .

    SEMICOLON       reduce using rule 21 (function_heading -> FUNCTION IDENTIFIER COLON type .)


state 84

    (22) function_heading -> FUNCTION IDENTIFIER LPAREN parameters_list . RPAREN COLON type

    RPAREN          shift and go to state 118


state 85

    (9) variable_declaration -> IDENTIFIER COLON type SEMICOLON .

    IDENTIFIER      reduce using rule 9 (variable_declaration -> IDENTIFIER COLON type SEMICOLON .)
    PROCEDURE       reduce using rule 9 (variable_declaration -> IDENTIFIER COLON type SEMICOLON .)
    FUNCTION        reduce using rule 9 (variable_declaration -> IDENTIFIER COLON type SEMICOLON .)
    BEGIN           reduce using rule 9 (variable_declaration -> IDENTIFIER COLON type SEMICOLON .)


state 86

    (30) statement_sequence -> statement SEMICOLON statement_sequence .

    END             reduce using rule 30 (statement_sequence -> statement SEMICOLON statement_sequence .)


state 87

    (44) assignment_statement -> IDENTIFIER ASSIGNMENT expression .
    (52) expression -> expression . and_or expression_m
    (56) and_or -> . AND
    (57) and_or -> . OR

    SEMICOLON       reduce using rule 44 (assignment_statement -> IDENTIFIER ASSIGNMENT expression .)
    UNTIL           reduce using rule 44 (assignment_statement -> IDENTIFIER ASSIGNMENT expression .)
    TO              reduce using rule 44 (assignment_statement -> IDENTIFIER ASSIGNMENT expression .)
    DOWNTO          reduce using rule 44 (assignment_statement -> IDENTIFIER ASSIGNMENT expression .)
    AND             shift and go to state 93
    OR              shift and go to state 94

    and_or                         shift and go to state 92

state 88

    (40) procedure_or_function_call -> IDENTIFIER LPAREN variables_list . RPAREN
    (41) variables_list -> variables_list . COMMA variable

    RPAREN          shift and go to state 119
    COMMA           shift and go to state 120


state 89

    (42) variables_list -> variable .

    RPAREN          reduce using rule 42 (variables_list -> variable .)
    COMMA           reduce using rule 42 (variables_list -> variable .)


state 90

    (43) variable -> expression .
    (52) expression -> expression . and_or expression_m
    (56) and_or -> . AND
    (57) and_or -> . OR

    RPAREN          reduce using rule 43 (variable -> expression .)
    COMMA           reduce using rule 43 (variable -> expression .)
    AND             shift and go to state 93
    OR              shift and go to state 94

    and_or                         shift and go to state 92

state 91

    (45) if_statement -> IF expression THEN . compound_statement else_statement
    (29) compound_statement -> . BEGIN statement_sequence END

    BEGIN           shift and go to state 23

    compound_statement             shift and go to state 121

state 92

    (52) expression -> expression and_or . expression_m
    (54) expression_m -> . element
    (55) expression_m -> . expression_m sign element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    expression_m                   shift and go to state 122
    element                        shift and go to state 66
    function_call                  shift and go to state 75

state 93

    (56) and_or -> AND .

    BOOLEAN         reduce using rule 56 (and_or -> AND .)
    NOT             reduce using rule 56 (and_or -> AND .)
    IDENTIFIER      reduce using rule 56 (and_or -> AND .)
    REAL            reduce using rule 56 (and_or -> AND .)
    INTEGER         reduce using rule 56 (and_or -> AND .)
    CHAR            reduce using rule 56 (and_or -> AND .)
    STRING          reduce using rule 56 (and_or -> AND .)
    LPAREN          reduce using rule 56 (and_or -> AND .)


state 94

    (57) and_or -> OR .

    BOOLEAN         reduce using rule 57 (and_or -> OR .)
    NOT             reduce using rule 57 (and_or -> OR .)
    IDENTIFIER      reduce using rule 57 (and_or -> OR .)
    REAL            reduce using rule 57 (and_or -> OR .)
    INTEGER         reduce using rule 57 (and_or -> OR .)
    CHAR            reduce using rule 57 (and_or -> OR .)
    STRING          reduce using rule 57 (and_or -> OR .)
    LPAREN          reduce using rule 57 (and_or -> OR .)


state 95

    (55) expression_m -> expression_m sign . element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    element                        shift and go to state 123
    function_call                  shift and go to state 75

state 96

    (58) sign -> PLUS .

    BOOLEAN         reduce using rule 58 (sign -> PLUS .)
    NOT             reduce using rule 58 (sign -> PLUS .)
    IDENTIFIER      reduce using rule 58 (sign -> PLUS .)
    REAL            reduce using rule 58 (sign -> PLUS .)
    INTEGER         reduce using rule 58 (sign -> PLUS .)
    CHAR            reduce using rule 58 (sign -> PLUS .)
    STRING          reduce using rule 58 (sign -> PLUS .)
    LPAREN          reduce using rule 58 (sign -> PLUS .)


state 97

    (59) sign -> MINUS .

    BOOLEAN         reduce using rule 59 (sign -> MINUS .)
    NOT             reduce using rule 59 (sign -> MINUS .)
    IDENTIFIER      reduce using rule 59 (sign -> MINUS .)
    REAL            reduce using rule 59 (sign -> MINUS .)
    INTEGER         reduce using rule 59 (sign -> MINUS .)
    CHAR            reduce using rule 59 (sign -> MINUS .)
    STRING          reduce using rule 59 (sign -> MINUS .)
    LPAREN          reduce using rule 59 (sign -> MINUS .)


state 98

    (60) sign -> INT_DIV .

    BOOLEAN         reduce using rule 60 (sign -> INT_DIV .)
    NOT             reduce using rule 60 (sign -> INT_DIV .)
    IDENTIFIER      reduce using rule 60 (sign -> INT_DIV .)
    REAL            reduce using rule 60 (sign -> INT_DIV .)
    INTEGER         reduce using rule 60 (sign -> INT_DIV .)
    CHAR            reduce using rule 60 (sign -> INT_DIV .)
    STRING          reduce using rule 60 (sign -> INT_DIV .)
    LPAREN          reduce using rule 60 (sign -> INT_DIV .)


state 99

    (61) sign -> FLOAT_DIV .

    BOOLEAN         reduce using rule 61 (sign -> FLOAT_DIV .)
    NOT             reduce using rule 61 (sign -> FLOAT_DIV .)
    IDENTIFIER      reduce using rule 61 (sign -> FLOAT_DIV .)
    REAL            reduce using rule 61 (sign -> FLOAT_DIV .)
    INTEGER         reduce using rule 61 (sign -> FLOAT_DIV .)
    CHAR            reduce using rule 61 (sign -> FLOAT_DIV .)
    STRING          reduce using rule 61 (sign -> FLOAT_DIV .)
    LPAREN          reduce using rule 61 (sign -> FLOAT_DIV .)


state 100

    (62) sign -> MULTIPLY .

    BOOLEAN         reduce using rule 62 (sign -> MULTIPLY .)
    NOT             reduce using rule 62 (sign -> MULTIPLY .)
    IDENTIFIER      reduce using rule 62 (sign -> MULTIPLY .)
    REAL            reduce using rule 62 (sign -> MULTIPLY .)
    INTEGER         reduce using rule 62 (sign -> MULTIPLY .)
    CHAR            reduce using rule 62 (sign -> MULTIPLY .)
    STRING          reduce using rule 62 (sign -> MULTIPLY .)
    LPAREN          reduce using rule 62 (sign -> MULTIPLY .)


state 101

    (63) sign -> MOD .

    BOOLEAN         reduce using rule 63 (sign -> MOD .)
    NOT             reduce using rule 63 (sign -> MOD .)
    IDENTIFIER      reduce using rule 63 (sign -> MOD .)
    REAL            reduce using rule 63 (sign -> MOD .)
    INTEGER         reduce using rule 63 (sign -> MOD .)
    CHAR            reduce using rule 63 (sign -> MOD .)
    STRING          reduce using rule 63 (sign -> MOD .)
    LPAREN          reduce using rule 63 (sign -> MOD .)


state 102

    (64) sign -> EQ .

    BOOLEAN         reduce using rule 64 (sign -> EQ .)
    NOT             reduce using rule 64 (sign -> EQ .)
    IDENTIFIER      reduce using rule 64 (sign -> EQ .)
    REAL            reduce using rule 64 (sign -> EQ .)
    INTEGER         reduce using rule 64 (sign -> EQ .)
    CHAR            reduce using rule 64 (sign -> EQ .)
    STRING          reduce using rule 64 (sign -> EQ .)
    LPAREN          reduce using rule 64 (sign -> EQ .)


state 103

    (65) sign -> NEQ .

    BOOLEAN         reduce using rule 65 (sign -> NEQ .)
    NOT             reduce using rule 65 (sign -> NEQ .)
    IDENTIFIER      reduce using rule 65 (sign -> NEQ .)
    REAL            reduce using rule 65 (sign -> NEQ .)
    INTEGER         reduce using rule 65 (sign -> NEQ .)
    CHAR            reduce using rule 65 (sign -> NEQ .)
    STRING          reduce using rule 65 (sign -> NEQ .)
    LPAREN          reduce using rule 65 (sign -> NEQ .)


state 104

    (66) sign -> LT .

    BOOLEAN         reduce using rule 66 (sign -> LT .)
    NOT             reduce using rule 66 (sign -> LT .)
    IDENTIFIER      reduce using rule 66 (sign -> LT .)
    REAL            reduce using rule 66 (sign -> LT .)
    INTEGER         reduce using rule 66 (sign -> LT .)
    CHAR            reduce using rule 66 (sign -> LT .)
    STRING          reduce using rule 66 (sign -> LT .)
    LPAREN          reduce using rule 66 (sign -> LT .)


state 105

    (67) sign -> GT .

    BOOLEAN         reduce using rule 67 (sign -> GT .)
    NOT             reduce using rule 67 (sign -> GT .)
    IDENTIFIER      reduce using rule 67 (sign -> GT .)
    REAL            reduce using rule 67 (sign -> GT .)
    INTEGER         reduce using rule 67 (sign -> GT .)
    CHAR            reduce using rule 67 (sign -> GT .)
    STRING          reduce using rule 67 (sign -> GT .)
    LPAREN          reduce using rule 67 (sign -> GT .)


state 106

    (68) sign -> LTE .

    BOOLEAN         reduce using rule 68 (sign -> LTE .)
    NOT             reduce using rule 68 (sign -> LTE .)
    IDENTIFIER      reduce using rule 68 (sign -> LTE .)
    REAL            reduce using rule 68 (sign -> LTE .)
    INTEGER         reduce using rule 68 (sign -> LTE .)
    CHAR            reduce using rule 68 (sign -> LTE .)
    STRING          reduce using rule 68 (sign -> LTE .)
    LPAREN          reduce using rule 68 (sign -> LTE .)


state 107

    (69) sign -> GTE .

    BOOLEAN         reduce using rule 69 (sign -> GTE .)
    NOT             reduce using rule 69 (sign -> GTE .)
    IDENTIFIER      reduce using rule 69 (sign -> GTE .)
    REAL            reduce using rule 69 (sign -> GTE .)
    INTEGER         reduce using rule 69 (sign -> GTE .)
    CHAR            reduce using rule 69 (sign -> GTE .)
    STRING          reduce using rule 69 (sign -> GTE .)
    LPAREN          reduce using rule 69 (sign -> GTE .)


state 108

    (71) element -> NOT element .

    PLUS            reduce using rule 71 (element -> NOT element .)
    MINUS           reduce using rule 71 (element -> NOT element .)
    INT_DIV         reduce using rule 71 (element -> NOT element .)
    FLOAT_DIV       reduce using rule 71 (element -> NOT element .)
    MULTIPLY        reduce using rule 71 (element -> NOT element .)
    MOD             reduce using rule 71 (element -> NOT element .)
    EQ              reduce using rule 71 (element -> NOT element .)
    NEQ             reduce using rule 71 (element -> NOT element .)
    LT              reduce using rule 71 (element -> NOT element .)
    GT              reduce using rule 71 (element -> NOT element .)
    LTE             reduce using rule 71 (element -> NOT element .)
    GTE             reduce using rule 71 (element -> NOT element .)
    THEN            reduce using rule 71 (element -> NOT element .)
    AND             reduce using rule 71 (element -> NOT element .)
    OR              reduce using rule 71 (element -> NOT element .)
    DO              reduce using rule 71 (element -> NOT element .)
    SEMICOLON       reduce using rule 71 (element -> NOT element .)
    UNTIL           reduce using rule 71 (element -> NOT element .)
    TO              reduce using rule 71 (element -> NOT element .)
    DOWNTO          reduce using rule 71 (element -> NOT element .)
    RPAREN          reduce using rule 71 (element -> NOT element .)
    COMMA           reduce using rule 71 (element -> NOT element .)


state 109

    (79) function_call -> IDENTIFIER LPAREN . variables_list RPAREN
    (41) variables_list -> . variables_list COMMA variable
    (42) variables_list -> . variable
    (43) variable -> . expression
    (52) expression -> . expression and_or expression_m
    (53) expression -> . expression_m
    (54) expression_m -> . element
    (55) expression_m -> . expression_m sign element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    variables_list                 shift and go to state 124
    variable                       shift and go to state 89
    expression                     shift and go to state 90
    expression_m                   shift and go to state 65
    element                        shift and go to state 66
    function_call                  shift and go to state 75

state 110

    (77) element -> LPAREN expression . RPAREN
    (52) expression -> expression . and_or expression_m
    (56) and_or -> . AND
    (57) and_or -> . OR

    RPAREN          shift and go to state 125
    AND             shift and go to state 93
    OR              shift and go to state 94

    and_or                         shift and go to state 92

state 111

    (48) while_statement -> WHILE expression DO . statement
    (32) statement -> . compound_statement
    (33) statement -> . assignment_statement
    (34) statement -> . if_statement
    (35) statement -> . while_statement
    (36) statement -> . repeat_statement
    (37) statement -> . for_statement
    (38) statement -> . procedure_or_function_call
    (29) compound_statement -> . BEGIN statement_sequence END
    (44) assignment_statement -> . IDENTIFIER ASSIGNMENT expression
    (45) if_statement -> . IF expression THEN compound_statement else_statement
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement UNTIL expression
    (50) for_statement -> . FOR assignment_statement TO expression DO statement
    (51) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (39) procedure_or_function_call -> . IDENTIFIER
    (40) procedure_or_function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BEGIN           shift and go to state 23
    IDENTIFIER      shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51

    statement                      shift and go to state 126
    compound_statement             shift and go to state 40
    assignment_statement           shift and go to state 41
    if_statement                   shift and go to state 42
    while_statement                shift and go to state 43
    repeat_statement               shift and go to state 44
    for_statement                  shift and go to state 45
    procedure_or_function_call     shift and go to state 46

state 112

    (49) repeat_statement -> REPEAT statement UNTIL . expression
    (52) expression -> . expression and_or expression_m
    (53) expression -> . expression_m
    (54) expression_m -> . element
    (55) expression_m -> . expression_m sign element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    expression                     shift and go to state 127
    expression_m                   shift and go to state 65
    element                        shift and go to state 66
    function_call                  shift and go to state 75

state 113

    (50) for_statement -> FOR assignment_statement TO . expression DO statement
    (52) expression -> . expression and_or expression_m
    (53) expression -> . expression_m
    (54) expression_m -> . element
    (55) expression_m -> . expression_m sign element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    expression                     shift and go to state 128
    expression_m                   shift and go to state 65
    element                        shift and go to state 66
    function_call                  shift and go to state 75

state 114

    (51) for_statement -> FOR assignment_statement DOWNTO . expression DO statement
    (52) expression -> . expression and_or expression_m
    (53) expression -> . expression_m
    (54) expression_m -> . element
    (55) expression_m -> . expression_m sign element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    expression                     shift and go to state 129
    expression_m                   shift and go to state 65
    element                        shift and go to state 66
    function_call                  shift and go to state 75

state 115

    (25) parameter -> IDENTIFIER COLON . type
    (10) type -> . SINTEGER
    (11) type -> . SCHAR
    (12) type -> . SREAL
    (13) type -> . SSTRING
    (14) type -> . SBOOLEAN

    SINTEGER        shift and go to state 30
    SCHAR           shift and go to state 31
    SREAL           shift and go to state 32
    SSTRING         shift and go to state 33
    SBOOLEAN        shift and go to state 34

    type                           shift and go to state 130

state 116

    (28) procedure_heading -> PROCEDURE IDENTIFIER LPAREN parameters_list RPAREN .

    SEMICOLON       reduce using rule 28 (procedure_heading -> PROCEDURE IDENTIFIER LPAREN parameters_list RPAREN .)


state 117

    (23) parameters_list -> parameter COMMA . parameters_list
    (23) parameters_list -> . parameter COMMA parameters_list
    (24) parameters_list -> . parameter
    (25) parameter -> . IDENTIFIER COLON type

    IDENTIFIER      shift and go to state 80

    parameter                      shift and go to state 82
    parameters_list                shift and go to state 131

state 118

    (22) function_heading -> FUNCTION IDENTIFIER LPAREN parameters_list RPAREN . COLON type

    COLON           shift and go to state 132


state 119

    (40) procedure_or_function_call -> IDENTIFIER LPAREN variables_list RPAREN .

    SEMICOLON       reduce using rule 40 (procedure_or_function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    UNTIL           reduce using rule 40 (procedure_or_function_call -> IDENTIFIER LPAREN variables_list RPAREN .)


state 120

    (41) variables_list -> variables_list COMMA . variable
    (43) variable -> . expression
    (52) expression -> . expression and_or expression_m
    (53) expression -> . expression_m
    (54) expression_m -> . element
    (55) expression_m -> . expression_m sign element
    (70) element -> . BOOLEAN
    (71) element -> . NOT element
    (72) element -> . IDENTIFIER
    (73) element -> . REAL
    (74) element -> . INTEGER
    (75) element -> . CHAR
    (76) element -> . STRING
    (77) element -> . LPAREN expression RPAREN
    (78) element -> . function_call
    (79) function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BOOLEAN         shift and go to state 67
    NOT             shift and go to state 68
    IDENTIFIER      shift and go to state 69
    REAL            shift and go to state 70
    INTEGER         shift and go to state 71
    CHAR            shift and go to state 72
    STRING          shift and go to state 73
    LPAREN          shift and go to state 74

    variable                       shift and go to state 133
    expression                     shift and go to state 90
    expression_m                   shift and go to state 65
    element                        shift and go to state 66
    function_call                  shift and go to state 75

state 121

    (45) if_statement -> IF expression THEN compound_statement . else_statement
    (46) else_statement -> . ELSE compound_statement
    (47) else_statement -> . empty
    (1) empty -> .

    ELSE            shift and go to state 135
    SEMICOLON       reduce using rule 1 (empty -> .)
    UNTIL           reduce using rule 1 (empty -> .)

    else_statement                 shift and go to state 134
    empty                          shift and go to state 136

state 122

    (52) expression -> expression and_or expression_m .
    (55) expression_m -> expression_m . sign element
    (58) sign -> . PLUS
    (59) sign -> . MINUS
    (60) sign -> . INT_DIV
    (61) sign -> . FLOAT_DIV
    (62) sign -> . MULTIPLY
    (63) sign -> . MOD
    (64) sign -> . EQ
    (65) sign -> . NEQ
    (66) sign -> . LT
    (67) sign -> . GT
    (68) sign -> . LTE
    (69) sign -> . GTE

    THEN            reduce using rule 52 (expression -> expression and_or expression_m .)
    AND             reduce using rule 52 (expression -> expression and_or expression_m .)
    OR              reduce using rule 52 (expression -> expression and_or expression_m .)
    DO              reduce using rule 52 (expression -> expression and_or expression_m .)
    SEMICOLON       reduce using rule 52 (expression -> expression and_or expression_m .)
    UNTIL           reduce using rule 52 (expression -> expression and_or expression_m .)
    TO              reduce using rule 52 (expression -> expression and_or expression_m .)
    DOWNTO          reduce using rule 52 (expression -> expression and_or expression_m .)
    RPAREN          reduce using rule 52 (expression -> expression and_or expression_m .)
    COMMA           reduce using rule 52 (expression -> expression and_or expression_m .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97
    INT_DIV         shift and go to state 98
    FLOAT_DIV       shift and go to state 99
    MULTIPLY        shift and go to state 100
    MOD             shift and go to state 101
    EQ              shift and go to state 102
    NEQ             shift and go to state 103
    LT              shift and go to state 104
    GT              shift and go to state 105
    LTE             shift and go to state 106
    GTE             shift and go to state 107

    sign                           shift and go to state 95

state 123

    (55) expression_m -> expression_m sign element .

    PLUS            reduce using rule 55 (expression_m -> expression_m sign element .)
    MINUS           reduce using rule 55 (expression_m -> expression_m sign element .)
    INT_DIV         reduce using rule 55 (expression_m -> expression_m sign element .)
    FLOAT_DIV       reduce using rule 55 (expression_m -> expression_m sign element .)
    MULTIPLY        reduce using rule 55 (expression_m -> expression_m sign element .)
    MOD             reduce using rule 55 (expression_m -> expression_m sign element .)
    EQ              reduce using rule 55 (expression_m -> expression_m sign element .)
    NEQ             reduce using rule 55 (expression_m -> expression_m sign element .)
    LT              reduce using rule 55 (expression_m -> expression_m sign element .)
    GT              reduce using rule 55 (expression_m -> expression_m sign element .)
    LTE             reduce using rule 55 (expression_m -> expression_m sign element .)
    GTE             reduce using rule 55 (expression_m -> expression_m sign element .)
    THEN            reduce using rule 55 (expression_m -> expression_m sign element .)
    AND             reduce using rule 55 (expression_m -> expression_m sign element .)
    OR              reduce using rule 55 (expression_m -> expression_m sign element .)
    DO              reduce using rule 55 (expression_m -> expression_m sign element .)
    SEMICOLON       reduce using rule 55 (expression_m -> expression_m sign element .)
    UNTIL           reduce using rule 55 (expression_m -> expression_m sign element .)
    TO              reduce using rule 55 (expression_m -> expression_m sign element .)
    DOWNTO          reduce using rule 55 (expression_m -> expression_m sign element .)
    RPAREN          reduce using rule 55 (expression_m -> expression_m sign element .)
    COMMA           reduce using rule 55 (expression_m -> expression_m sign element .)


state 124

    (79) function_call -> IDENTIFIER LPAREN variables_list . RPAREN
    (41) variables_list -> variables_list . COMMA variable

    RPAREN          shift and go to state 137
    COMMA           shift and go to state 120


state 125

    (77) element -> LPAREN expression RPAREN .

    PLUS            reduce using rule 77 (element -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 77 (element -> LPAREN expression RPAREN .)
    INT_DIV         reduce using rule 77 (element -> LPAREN expression RPAREN .)
    FLOAT_DIV       reduce using rule 77 (element -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 77 (element -> LPAREN expression RPAREN .)
    MOD             reduce using rule 77 (element -> LPAREN expression RPAREN .)
    EQ              reduce using rule 77 (element -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 77 (element -> LPAREN expression RPAREN .)
    LT              reduce using rule 77 (element -> LPAREN expression RPAREN .)
    GT              reduce using rule 77 (element -> LPAREN expression RPAREN .)
    LTE             reduce using rule 77 (element -> LPAREN expression RPAREN .)
    GTE             reduce using rule 77 (element -> LPAREN expression RPAREN .)
    THEN            reduce using rule 77 (element -> LPAREN expression RPAREN .)
    AND             reduce using rule 77 (element -> LPAREN expression RPAREN .)
    OR              reduce using rule 77 (element -> LPAREN expression RPAREN .)
    DO              reduce using rule 77 (element -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 77 (element -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 77 (element -> LPAREN expression RPAREN .)
    TO              reduce using rule 77 (element -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 77 (element -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 77 (element -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 77 (element -> LPAREN expression RPAREN .)


state 126

    (48) while_statement -> WHILE expression DO statement .

    SEMICOLON       reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    UNTIL           reduce using rule 48 (while_statement -> WHILE expression DO statement .)


state 127

    (49) repeat_statement -> REPEAT statement UNTIL expression .
    (52) expression -> expression . and_or expression_m
    (56) and_or -> . AND
    (57) and_or -> . OR

    SEMICOLON       reduce using rule 49 (repeat_statement -> REPEAT statement UNTIL expression .)
    UNTIL           reduce using rule 49 (repeat_statement -> REPEAT statement UNTIL expression .)
    AND             shift and go to state 93
    OR              shift and go to state 94

    and_or                         shift and go to state 92

state 128

    (50) for_statement -> FOR assignment_statement TO expression . DO statement
    (52) expression -> expression . and_or expression_m
    (56) and_or -> . AND
    (57) and_or -> . OR

    DO              shift and go to state 138
    AND             shift and go to state 93
    OR              shift and go to state 94

    and_or                         shift and go to state 92

state 129

    (51) for_statement -> FOR assignment_statement DOWNTO expression . DO statement
    (52) expression -> expression . and_or expression_m
    (56) and_or -> . AND
    (57) and_or -> . OR

    DO              shift and go to state 139
    AND             shift and go to state 93
    OR              shift and go to state 94

    and_or                         shift and go to state 92

state 130

    (25) parameter -> IDENTIFIER COLON type .

    COMMA           reduce using rule 25 (parameter -> IDENTIFIER COLON type .)
    RPAREN          reduce using rule 25 (parameter -> IDENTIFIER COLON type .)


state 131

    (23) parameters_list -> parameter COMMA parameters_list .

    RPAREN          reduce using rule 23 (parameters_list -> parameter COMMA parameters_list .)


state 132

    (22) function_heading -> FUNCTION IDENTIFIER LPAREN parameters_list RPAREN COLON . type
    (10) type -> . SINTEGER
    (11) type -> . SCHAR
    (12) type -> . SREAL
    (13) type -> . SSTRING
    (14) type -> . SBOOLEAN

    SINTEGER        shift and go to state 30
    SCHAR           shift and go to state 31
    SREAL           shift and go to state 32
    SSTRING         shift and go to state 33
    SBOOLEAN        shift and go to state 34

    type                           shift and go to state 140

state 133

    (41) variables_list -> variables_list COMMA variable .

    RPAREN          reduce using rule 41 (variables_list -> variables_list COMMA variable .)
    COMMA           reduce using rule 41 (variables_list -> variables_list COMMA variable .)


state 134

    (45) if_statement -> IF expression THEN compound_statement else_statement .

    SEMICOLON       reduce using rule 45 (if_statement -> IF expression THEN compound_statement else_statement .)
    UNTIL           reduce using rule 45 (if_statement -> IF expression THEN compound_statement else_statement .)


state 135

    (46) else_statement -> ELSE . compound_statement
    (29) compound_statement -> . BEGIN statement_sequence END

    BEGIN           shift and go to state 23

    compound_statement             shift and go to state 141

state 136

    (47) else_statement -> empty .

    SEMICOLON       reduce using rule 47 (else_statement -> empty .)
    UNTIL           reduce using rule 47 (else_statement -> empty .)


state 137

    (79) function_call -> IDENTIFIER LPAREN variables_list RPAREN .

    PLUS            reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    MINUS           reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    INT_DIV         reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    FLOAT_DIV       reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    MULTIPLY        reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    MOD             reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    EQ              reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    NEQ             reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    LT              reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    GT              reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    LTE             reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    GTE             reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    THEN            reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    AND             reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    OR              reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    DO              reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    SEMICOLON       reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    UNTIL           reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    TO              reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    DOWNTO          reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    RPAREN          reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)
    COMMA           reduce using rule 79 (function_call -> IDENTIFIER LPAREN variables_list RPAREN .)


state 138

    (50) for_statement -> FOR assignment_statement TO expression DO . statement
    (32) statement -> . compound_statement
    (33) statement -> . assignment_statement
    (34) statement -> . if_statement
    (35) statement -> . while_statement
    (36) statement -> . repeat_statement
    (37) statement -> . for_statement
    (38) statement -> . procedure_or_function_call
    (29) compound_statement -> . BEGIN statement_sequence END
    (44) assignment_statement -> . IDENTIFIER ASSIGNMENT expression
    (45) if_statement -> . IF expression THEN compound_statement else_statement
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement UNTIL expression
    (50) for_statement -> . FOR assignment_statement TO expression DO statement
    (51) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (39) procedure_or_function_call -> . IDENTIFIER
    (40) procedure_or_function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BEGIN           shift and go to state 23
    IDENTIFIER      shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51

    assignment_statement           shift and go to state 41
    statement                      shift and go to state 142
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 42
    while_statement                shift and go to state 43
    repeat_statement               shift and go to state 44
    for_statement                  shift and go to state 45
    procedure_or_function_call     shift and go to state 46

state 139

    (51) for_statement -> FOR assignment_statement DOWNTO expression DO . statement
    (32) statement -> . compound_statement
    (33) statement -> . assignment_statement
    (34) statement -> . if_statement
    (35) statement -> . while_statement
    (36) statement -> . repeat_statement
    (37) statement -> . for_statement
    (38) statement -> . procedure_or_function_call
    (29) compound_statement -> . BEGIN statement_sequence END
    (44) assignment_statement -> . IDENTIFIER ASSIGNMENT expression
    (45) if_statement -> . IF expression THEN compound_statement else_statement
    (48) while_statement -> . WHILE expression DO statement
    (49) repeat_statement -> . REPEAT statement UNTIL expression
    (50) for_statement -> . FOR assignment_statement TO expression DO statement
    (51) for_statement -> . FOR assignment_statement DOWNTO expression DO statement
    (39) procedure_or_function_call -> . IDENTIFIER
    (40) procedure_or_function_call -> . IDENTIFIER LPAREN variables_list RPAREN

    BEGIN           shift and go to state 23
    IDENTIFIER      shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    REPEAT          shift and go to state 50
    FOR             shift and go to state 51

    assignment_statement           shift and go to state 41
    statement                      shift and go to state 143
    compound_statement             shift and go to state 40
    if_statement                   shift and go to state 42
    while_statement                shift and go to state 43
    repeat_statement               shift and go to state 44
    for_statement                  shift and go to state 45
    procedure_or_function_call     shift and go to state 46

state 140

    (22) function_heading -> FUNCTION IDENTIFIER LPAREN parameters_list RPAREN COLON type .

    SEMICOLON       reduce using rule 22 (function_heading -> FUNCTION IDENTIFIER LPAREN parameters_list RPAREN COLON type .)


state 141

    (46) else_statement -> ELSE compound_statement .

    SEMICOLON       reduce using rule 46 (else_statement -> ELSE compound_statement .)
    UNTIL           reduce using rule 46 (else_statement -> ELSE compound_statement .)


state 142

    (50) for_statement -> FOR assignment_statement TO expression DO statement .

    SEMICOLON       reduce using rule 50 (for_statement -> FOR assignment_statement TO expression DO statement .)
    UNTIL           reduce using rule 50 (for_statement -> FOR assignment_statement TO expression DO statement .)


state 143

    (51) for_statement -> FOR assignment_statement DOWNTO expression DO statement .

    SEMICOLON       reduce using rule 51 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)
    UNTIL           reduce using rule 51 (for_statement -> FOR assignment_statement DOWNTO expression DO statement .)

